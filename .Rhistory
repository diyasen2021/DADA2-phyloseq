shiny::runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
output$heatmapPlot <- renderPlotly({
p <- plot_ly(x = rownames(data()), y = colnames(data()), z = data(), type = "heatmap", colorscale = "Viridis")
p
})
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny/brush.R')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny/test.R')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny/test.R')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny/test.R')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
runApp('Dropbox/Osthus/Learning/R/Rshiny/phylogeny')
reticulate::repl_python()
reticulate::repl_python()
library(phyloseq)
library(ggplot2)
library(DECIPHER)
# Step 1: Import DADA2 Results
# Load ASV count table
asv_table <- read.table("output/ASVs_counts.tsv", header=TRUE, row.names=1, sep="\t")
setwd("~/Documents/portfolio/dada216s")
library(phyloseq)
library(ggplot2)
library(DECIPHER)
# Step 1: Import DADA2 Results
# Load ASV count table
asv_table <- read.table("output/ASVs_counts.tsv", header=TRUE, row.names=1, sep="\t")
otu_table <- otu_table(asv_table, taxa_are_rows=TRUE)  # Create OTU table
# Load taxonomy table
taxonomy <- read.table("output/ASVs_taxonomy.tsv", header=TRUE, row.names=1, sep="\t")
tax_table <- tax_table(as.matrix(taxonomy))  # Create taxonomy table (convert to matrix)
# Step 2: Import Sample Metadata
metadata <- read.csv("output/metadata.csv", header=TRUE, row.names=1)  # Replace with your metadata file
library(phyloseq)
library(ggplot2)
library(DECIPHER)
# Step 1: Import DADA2 Results
# Load ASV count table
asv_table <- read.table("output/ASVs_counts.tsv", header=TRUE, row.names=1, sep="\t")
otu_table <- otu_table(asv_table, taxa_are_rows=TRUE)  # Create OTU table
# Load taxonomy table
taxonomy <- read.table("output/ASVs_taxonomy.tsv", header=TRUE, row.names=1, sep="\t")
tax_table <- tax_table(as.matrix(taxonomy))  # Create taxonomy table (convert to matrix)
# Step 2: Import Sample Metadata
metadata <- read.csv("output/metadata.csv", header=TRUE, row.names=1)  # Replace with your metadata file
sample_data <- sample_data(metadata)
# Step 3: Combine into a Phyloseq Object
physeq <- phyloseq(otu_table, tax_table, sample_data)
physeq
physeq.prop <- transform_sample_counts(physeq, function(otu) otu/sum(otu))
physeq.prop <- transform_sample_counts(physeq, function(otu) otu/sum(otu))
# Perform NMDS ordination using Bray-Curtis distances
ord.nmds.bray <- ordinate(physeq.prop, method="NMDS", distance="bray")
# Plot ordination with customization
nmds_plot <- plot_ordination(physeq.prop, ord.nmds.bray, color = "Group", title = "Bray-Curtis NMDS") +
geom_point(size = 3) +              # Customize point size
theme_minimal() +                  # Apply a minimal theme
theme(legend.position = "right")   # Adjust legend position
# Display the plot
print(nmds_plot)
View(physeq.prop)
asv_table <- read.table("output/ASVs_counts.tsv", header=TRUE, row.names=1, sep="\t")
otu_table <- otu_table(asv_table, taxa_are_rows=TRUE)  # Create OTU table
# Load taxonomy table
taxonomy <- read.table("output/ASVs_taxonomy.tsv", header=TRUE, row.names=1, sep="\t")
tax_table <- tax_table(as.matrix(taxonomy))  # Create taxonomy table (convert to matrix)
# Step 2: Import Sample Metadata
metadata <- read.csv("output/metadata.csv", header=TRUE, row.names=1)  # Replace with your metadata file
sample_data <- sample_data(metadata)
# Step 3: Combine into a Phyloseq Object
physeq <- phyloseq(otu_table, tax_table, sample_data)
physeq
# Transform data to relative abundances
physeq.prop <- transform_sample_counts(physeq, function(otu) otu/sum(otu))
# Perform NMDS ordination using Bray-Curtis distances
ord.nmds.bray <- ordinate(physeq.prop, method="NMDS", distance="bray")
# Plot ordination with customization
nmds_plot <- plot_ordination(physeq.prop, ord.nmds.bray, color = "Group", title = "Bray-Curtis NMDS") +
geom_point(size = 3) +              # Customize point size
theme_minimal() +                  # Apply a minimal theme
theme(legend.position = "right")   # Adjust legend position
# Display the plot
print(nmds_plot)
sample_data(physeq)
sample_data(physeq.prop)
identical(rownames(sample_data(physeq)), sample_names(physeq))
table(sample_data(physeq.prop)$Group)
# Basic ordination plot without customization
plot_ordination(physeq.prop, ord.nmds.bray, color = "Group")
